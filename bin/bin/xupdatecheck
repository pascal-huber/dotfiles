#!/bin/sh
# xupdatecheck -S | -l | -m | pattern... - Show update-check info for packages
#    -S Sync with the official update-check results
#    -l Include only locally installed packages
#    -m Include only manually installed packages
#    -x Additionally include direct dependencies of the packages

: ${XDG_CACHE_HOME:=~/.cache}
: ${XUC_CACHE:=$XDG_CACHE_HOME/xupdatecheck}
: ${XUC_REMOTE:='repo-default.voidlinux.org'}

XUC_REMOTE_RSYNC="rsync://${XUC_REMOTE}/voidlinux/void-updates/void-updates"
XUC_REMOTE_HTTPS="https://${XUC_REMOTE}/void-updates/void-updates"

last_modified_remote() {
	line=$(curl -s -v -X HEAD "${XUC_REMOTE_HTTPS}/_log.txt" 2>&1 | grep last-modified)
	if [ "$line" = "" ]; then
		echo "xupdatecheck: could not fetch remote timestamp" 1>&2
	fi
	echo "${line#*:}"
}

check_cache_timestamp() {
	timestamp_remote="$(last_modified_remote)"
	[ "$timestamp_remote" != "" ] || return
	timestamp_cache=$(cat "${XUC_CACHE}/timestamp")
	if ! [ "$timestamp_remote" = "$timestamp_cache" ]; then
		echo "xupdatecheck: cache outdated, please run xupdatecheck -S." 1>&2
	fi
}

update_cache() {
	if ! command -v rsync >/dev/null 2>&1; then
		echo "xupdatecheck: rsync command not found." 1>&2
		exit 2
	fi
	timestamp_remote=$(last_modified_remote)
	set -e
	rsync -rPz "${XUC_REMOTE_RSYNC}" "${XUC_CACHE}" --delete >/dev/null 2>&1
	echo "$timestamp_remote" >"${XUC_CACHE}/timestamp"
}

update_check() {
	grep -h "^${pkg} .*->.*" "${XUC_CACHE}"/void-updates/updates_*
	grep "NO VERSION found for ${pkg}$" "${XUC_CACHE}/void-updates/_log.txt"
}

pkgs=""
include_deps=false

while [ -n "$1" ]; do
	case $1 in
	"-S")
		update_cache
		exit
		;;
	"-m")
		pkgs="$pkgs $(xbps-query -m | sed 's#\(.*\)-[^-]*#\1#g')"
		shift
		;;
	"-l")
		pkgs=$(xbps-query -l | cut -d" " -f2 | sed 's#\(.*\)-[^-]*#\1#g')
		shift
		;;
	"-x")
		include_deps=true
		shift
		;;
	*)
		pkgs="$pkgs $1"
		shift
		;;
	esac
done

if [ ! -d "${XUC_CACHE}" ]; then
	echo "xupdatecheck: cache inexistent, please run xupdatecheck -S." 1>&2
	exit 3
fi

if $include_deps; then
	pkgs_all=""
	for pkg in $pkgs; do
		deps=$(xbps-query -x "$pkg" | cut -d">" -f1)
		# TODO: Decide wheter or not to filter redundant entries?
		pkgs_all=$(echo "$pkgs_all $pkg $deps" | uniq)
	done
	pkgs="$pkgs_all"
fi

if [ "$pkgs" = "" ]; then
	pkgs=$(xbps-query -Rs "*" | cut -d" " -f2 | sed 's#\(.*\)-[^-]*#\1#g')
fi

check_cache_timestamp
for pkg in $pkgs; do
	update_check "${pkg}"
done
